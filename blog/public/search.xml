<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[搭建个人博客网站服务说明]]></title>
      <url>%2Ftemp%2Fwordpress</url>
      <content type="text"><![CDATA[个人博客网站优势： 言论自由，防和谐 轻松备份所有文章 个性化，网站主题样式全是自定义 资费，有两种选择 自己买服务器：享受我们搭建服务器+搭科学上网+搭博客网站一条龙服务，全套180元，包3个月免费维护服务。每个月5美元服务器租用费自己交。 用我们的服务器：100元，包3个月免费维护服务。每个月10元服务器租用费。 联系方式 15914327348（微信同号） Haiyan3881（微信）]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[从入门到放弃-量化投资学习笔记（一）]]></title>
      <url>%2FQuant%2Fquant</url>
      <content type="text"><![CDATA[一、量化投资介绍有效市场假说EMH的三种形式： 弱式有效市场假说（Weak-Form Market Efficiency） 半强式有效市场假说（Semi-Strong-Form Market Efficiency） 强式有效市场假说（Strong-Form Market Efficiency） 推论： 如果弱式有效市场假说成立，则股票价格的技术分析失去作用，基本分析还可能帮助投资者获得超额利润。 如果半强式有效假说成立，在市场中利用基本面分析则失去作用，内幕消息可能获得超额利润。 在强式有效市场中，没有任何方法能帮助投资者获得超额利润，即使基金和有内幕消息者也一样。 主动投资的不足人性中对于获利的贪婪和对于损失的恐惧是亘古不变的 理查德·塞勒（Richard Thaler）理论 禀赋效应：人们在决策过程中对利和害的权衡是不均衡的，对“避害”的考虑远大于对“趋利”的考虑 跨期选择：人类恰恰是不擅长做跨期决策的，大多数时候会做出短视冲动的选择 心理账户 &amp; 储蓄理论：人在思考问题时，会在心里构建出分门别类的心理账户，分别进行计算 行为经济学 赚谁的钱：市场在某一特定时间内的无效性，或者说是别人犯的错误 赚什么钱：主动承担某种特定风险，继而获得承担该风险的风险溢价 主观投资与量化投资的区别只在于策略如何被制定以及如何被执行 收益率(return) 公式$$ r_P = \beta_P * r_B +\alpha_P $$ P：投资组合portfolio B：业绩基准组合B $\beta_P$：P相对于B的beta系数，又称P的系统风险 $\alpha_P$：反映了P对于B的超额收益能力，这部分收益与大盘的波动无关，这就是alpha的魅力 Alpha 的非常规定义：在交易中关于持有头寸选择和买卖时机把握的技巧 宽客(Quant) 一个完整的量化交易系统 市场：买卖什么 逻辑：买卖思路 头寸规模：买卖多少 入市：何时买进 止损：何时退出亏损的头寸 离市：何时退出盈利的头寸 二、量化必备股票基础知识交易决策过程 数据 价量时空仓 指标 信号 买卖 分时图与K线图的数据处理 分时图上共有251个数据点 K线图（蜡烛图）反应的是开高低收(Open/High/Low/Close) K线图数据（bars）是由Level1行情数据（ticks）经过格式解析、聚合处理成的。 正确地接收行情数据，并根据量化模型的需要累计出不同级别的分时和K线数据，是量化 一项基本功。 技术指标基于行情数据，通过特定数学公式或模型计算得出的、用于辅助交易决策的数值序列。 分类： 均线型：反映一段时间内的平均成本；具有一定的压力或支撑作用；MA、EXPMA、BBI… 趋势型：适用于趋势类的行情；检测趋势的启动、延续，还有可能的转折；MACD、SAR、ASI、DMI… 摆动型：适用于震荡类的行情；检测超买超卖、波动走势的可能转折点；KDJ、RSI、CCI、WR、BOLL… 能量型：度量涨跌的力度，预示价格位移的可持续性；依据是“量在价先，量价配合”；OBV、VOL、VR… MA-移动均线(Moving Average)$$ MA10k = \cfrac{1}{10} \sum{i = k-9}^k {Price_i} (k=10\cdots n) $$ 用Python计算MACD： 12345678import pandas as pd# the data type of "close" is pd.Seriesdef calc_macd(close, long, short, mid): diff = close.ewm(span=short).mean()-close.ewm(span=long).mean() dea= diff.ewm(span=mid).mean() macd= (diff - dea) * 2 return (diff, dea, macd) KD-随机指数$$ \%K = 100\times \cfrac{Close-min_n Low}{max_nHigh-min_nLow} $$ $$\%D = MA(\%K,N)$$ RSI-相对强弱指数$$RS = \cfrac{\sum_1^nMAX(Close-LC, 0)}{\sum_1^n|Close-LC|}$$ $$RSI = 100 - \cfrac{100}{1+RS}$$ 技术指标的应用技巧 信号：价格突破/指标突破、均线交叉/指标交叉、顶背离/底背离 用途：预警、确认、预测 决策：趋势跟踪、高抛低吸 动作：买入、卖出、观望 技术指标的应用原则客观看待，理性应用 扬长避短 间接性、滞后性、钝化 连续背离现象 时间周期相关 综合判断 靠单一指标解决问题不现实 交叉验证，辅助决策 概率思维 行情多变，市场不可预测 量化即概率，大数定律 更多的交易决策依据 基本面：业绩表现、潜力大小、是否抗跌 资金面：大盘/板块资金流向、个股资金流向、主力大单的表现 技术面：趋势方向如何、涨跌空间大小、有无买卖信号 其他：市场情绪、利空/利多的消息、公告事件 集合竞价撮合交易原理 撮合交易是指交易所的计算机交易系统对买卖双方的交易指令进行配对的过程 撮合成交的前提是买入价大于或者等于卖出价： 相等：“买入价/卖出价”作为成交价 不等：“买入价、卖出价、前一成交价，取三者居中的那个价格”作为成交价 基本原则： 按价格优先、时间优先的原则进行 集合竞价时间线09:15~09:20：接受买卖申报，也可撤单申报 09:20~09:25：开盘集合竞价阶段，不接受撤单申报 09:25：产生（当日该股的）开盘价：按价格优先和时间优先的原则计算各价位的成交量，最后以最大成交量的价格作为成交价 09:25~09:30：只接受买卖申报，但不可撤单，也不做处理 09:30：进入正常交易（连续竞价）阶段 除权、复权除权/除息原因 因为以下事件，每股对应的权益发生了变化 分红：派息、送股、转股（转增） 融资：配股 为公平起见，需要对股价进行修正。该过程就是“除权/除息” 复权原因除权/除息使得股价（每股代表的权益）发生了跳变。为便于观察股价的正常波动，将扣除的权息再回补过去（修复股价的跳变），该过程就是“复权”。 复权方式 前复权 后复权 定点复权 不复权 打新、配股打新股 所谓“打新”，是指个人或机构投资者用资金参与新股的申购，如果（配号）中签且预存资金充足的话，就买到了即将上市的股票 因为IPO通常折价发行，所以新上市的股票往往短期上涨的概率较大，所以如果打新成功，收益稳风险低，因此“打新申购”非常受投资者的青睐 温馨提示：两个交易所均配置有底仓；维持一定的底仓市值额度；风险意识 配股 上市公司向原股东按其持股比例，以低于市价的某一特定价格配售一定数量新发行股票的融资行为 在股权登记日收市清算后仍持有该股，则自动享有配股权利；需在缴款期内参加配股，逾期不操作，即为放弃配股权利 一般配股价越低（也就是对老股东折让的幅度越大），参与配股越合算。但受除权和配股募资投向等影响，并不意味着稳赚不赔 公告研报社交媒体是面向量化的非结构化数据处理基础。 处理非结构化数据的相关技术： 渠道和获取：接口、抓取、购买 数据清洗、格式转换：网页、PDF、图片 分析、处理和存储：非结构化到半结构化/结构化：NLP、统计语言模型、规则 应用方式：独到视角、演进分析、建模 趋势分析和量价分析趋势分析和量价分析是技术派量化的逻辑基础 。 趋势分析趋势即牛熊，需关注三个关系： 供需关系：趋势的动力来自于供需关系的不平衡 因果关系：趋势形成之前需要准备过程 努力和结果关系：成交量的增长没有使价格大幅增长，这是走势停止行为 对支撑和压力的理解：支撑： 在某个价位购买力超过了抛售压力，需求吸收了全部供应 当价格再次回到支撑位，反弹力度表明需求质量 压力： 某个价位抛售力量超过了购买力，供应超过了需求 当价格再次回到压力位，价格回落力度表明供应是否扩大 量价时空 量：供应和需求投入的兵力 价：供应和需求当前的强弱 时：供应和需求拉锯的过程长度 空：供应和需求战场的广阔程度 量价分析的核心问题还是三个关系： 供需关系： 质量 力量 因果关系： 过程 时空 努力和结果关系： 显性 隐性 参考书籍 《打开量化投资的黑箱》 Inside the Black’Box:A Simple Guide to Quantitative and High-Frequency Trading 里什•纳兰(Rishi K.Narang) 《主动投资组合管理:创造高收益并控制风险的量化投资方法》 Active Portfolio Management: A Quantitative Approach for Providing Superior Returns and Controlling Risk (2th Edition) 理查德C.格林诺德(Richard C.Grinol) , 雷诺德N.卡恩(Ronald N.Kahn) , 李腾 (译者) 《威科夫操盘法》 Wychkoff Trading Tools and Techniques 孟洪涛 （Edward Meng） 《证券分析》 Security Analysis: Sixth Edition 本杰明•格雷厄姆 (Benjamin Graham) , 戴维•多德 (David L. Dodd)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[shadowshock下载及配置]]></title>
      <url>%2Ftemp%2FShadowshock</url>
      <content type="text"><![CDATA[获取shadowshock客户端请找我们获取对应平台的shadowshock客户端，或者根据以下链接自己下载。 windows：https://github.com/shadowsocks/shadowsocks-windows/releases Mac：https://github.com/shadowsocks/ShadowsocksX-NG/releases Android：https://github.com/shadowsocks/shadowsocks-android/releases IOS：IOS版本的shadowsocks客户端需要去app store下载，由于国区已全部下架，请自备非国区AppleID。推荐如下应用，大多需要付费购买： SsrConnectPro（免费） wingy shadowrocket potatso shadowproxy shadowshock客户端配置下面以Windows端为例 运行shadowshock客户端，右键打开服务器配置，如下 填写服务器配置地址：服务器的IP端口：端口号加密方法：aes-256-cfb密码：密码 右键shadowshock客户端，选中启用系统代理，就大功告成了。 输入www.google.com 测试网络。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[搭建个人VPN服务说明]]></title>
      <url>%2Ftemp%2FVultrRegister</url>
      <content type="text"><![CDATA[搭建个人VPN优势： 高速稳定，1080P油管无压力 低资费，5美元/月 每月1000G流量 最多支持5个账号 防和谐级别高 资费： 100元：服务费+三个月维护费+技术支持 5美元/月：服务器月租费，运营商收取 下面是用户协助我们搭建服务的过程： 步骤一：注册平台账号为什么需要你自己注册而不是我们提供呢？因为你用自己邮箱注册，账号就是你的，买的服务器也是你的，这样对你来说最安全，我们只是帮你搭建服务器和VPN。而且你还可以用这个服务器干别的事，例如搭建个人博客和搭建个人网游加速器等等。 打开网址：vultr 注册 步骤二：缴第一笔月租费你需要入账一笔钱才能买服务器，月租费是每月5美元，支持支付宝付款，最低一笔10美元，也就是说你需要每两个月入一笔10美元来维持服务器运转。 我们注册之后呢会进入这个界面，然后按下面指示操作选择支付宝付款 然后按下面操作选择支付宝付款 然后就跳转到支付宝付款界面了，扫码付款即可完成入账操作。 最后最后一步，请把刚注册的账号密码交给我们的工程师，我们会尽快帮你搭建服务器。 另外，如果你想创建多个VPN账号，请把账号数和密码交给我们。我们最多帮你建立5个VPN账号。格式如下：5个账号，密码分别是： vpn0001 vpn0002 vpn0003 vpn0004 vpn0005]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android Https双向验证]]></title>
      <url>%2FAndroid%2FAndroidHttpsVerification</url>
      <content type="text"><![CDATA[对于网络安全，我们的重视程度远远及不上欧美等国家，部署Https的网站远远少于他们；但随着互联网不断普及，国民对数据安全的需求也越来越高，Https逐渐在国内普及开来。最近公司项目也开始转为Https，故简单记录一下Android Https的一些设置。 生成相关证书 从后台那里拿到P12格式的证书文件，如：server.pfx; 生成服务器cer证书 安装openssl我采用的是直接下载安装包，下载地址；也可以选择下载源码自己编译openssl。 生成证书server.cer安装之后配置环境变量，用管理员权限打开或者使用win10的PowerShell，输入1openssl pkcs12 -in server.pfx -out server.cer 然后输入证书的密码和PEM密码，成功之后生成证书server.cer 生成客户端信任证书库client.truststore由于安卓端的证书类型必须是BKS类型，需要这样做： 下载这个jar：bcprov-ext-jdk15on-159.jar 将jar文件放在 Java 主目录下的 jre/lib/ext目录下 修改jre/lib/security/java.security这个文件：在List of providers 注释的地方添加这一行security.provider.11=org.bouncycastle.jce.provider.BouncyCastleProvider 然后重启终端，输入下面代码生成client.truststore，密码自己改：1keytool -import -v -alias server -file server.cer -keystore client.truststore -storepass 123456 -storetype BKS -provider org.bouncycastle.jce.provider.BouncyCastleProvider 如果不添加jar文件，会报Class not found错误。但是，某些情况下（大概是证书的格式或来源不符合要求）还是会报错：所输入的不是 X.509 证书 证书格式转换工具XCA 下载安装：地址 打开程序，点击：File&gt;New DataBase新建库文件，选择保存位置，输入密码，即成功创建库。 导入证书server.cer：点击：Import&gt;Certificate，选择之前生成的证书server.cer，导入。 导出p7b格式证书： 选择p7b格式，点击ok导出xxxx.p7b的证书 打开xxxx.p7b证书文件，找到证书，右键&gt;所有任务&gt;导出 导出X.509格式证书，选择之前server.cer文件覆盖保存，确认生成server.cer证书 7.最后，重新执行命令，会提示是否信任此证书? [否]:，输入是生成client.truststore：1keytool -import -v -alias server -file server.cer -keystore client.truststore -storepass 123456 -storetype BKS -provider org.bouncycastle.jce.provider.BouncyCastleProvider Android端SSL认证请求我们需要两个证书： server.pfx：客户端证书，用于请求的时候给服务器来验证身份 client.truststore：客户端证书库，用于验证服务器端身份，防止钓鱼 SSLSocketFactory方式进行SSL认证将两个证书添加到android项目的assets目标下面，建立SSL验证工具，代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566public class SSLHelper &#123; private static final String KEY_STORE_TYPE_BKS = "bks"; private static final String KEY_STORE_TYPE_P12 = "PKCS12"; public static final String KEY_STORE_CLIENT_PATH = "server.pfx";//P12文件 private static final String KEY_STORE_TRUST_PATH = "client.truststore";//truststore文件 public static final String KEY_STORE_PASSWORD = "123456";//P12文件密码 private static final String KEY_STORE_TRUST_PASSWORD = "123456";//truststore文件密码 public static SSLSocketFactory getSSLSocketFactory(Context context) &#123; SSLSocketFactory factory = null; try &#123; // 服务器端需要验证的客户端证书 KeyStore keyStore = KeyStore.getInstance(KEY_STORE_TYPE_P12); // 客户端信任的服务器端证书 KeyStore trustStore = KeyStore.getInstance(KEY_STORE_TYPE_BKS); InputStream ksIn = context.getResources().getAssets() .open(KEY_STORE_CLIENT_PATH); InputStream tsIn = context.getResources().getAssets() .open(KEY_STORE_TRUST_PATH); try &#123; keyStore.load(ksIn, KEY_STORE_PASSWORD.toCharArray()); trustStore.load(tsIn, KEY_STORE_TRUST_PASSWORD.toCharArray()); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; try &#123; ksIn.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; try &#123; tsIn.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; //信任管理器 TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance( TrustManagerFactory.getDefaultAlgorithm()); trustManagerFactory.init(trustStore); //密钥管理器 KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance("X509"); keyManagerFactory.init(keyStore, KEY_STORE_PASSWORD.toCharArray()); //初始化SSLContext SSLContext sslContext = SSLContext.getInstance("TLS"); sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null); factory = sslContext.getSocketFactory(); &#125; catch (NoSuchAlgorithmException e) &#123; e.printStackTrace(); &#125; catch (KeyManagementException e) &#123; e.printStackTrace(); &#125; catch (KeyStoreException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; catch (UnrecoverableKeyException e) &#123; e.printStackTrace(); &#125; return factory; &#125;&#125; OkHttpClient配置12OkHttpClient client = new OkHttpClient.Builder() .sslSocketFactory(SSLHelper.getSSLSocketFactory(getApplication())) 主机名验证如果出现主机名验证错误hostname error，需要添加hostnameVerifier： 123OkHttpClient client = new OkHttpClient.Builder() .sslSocketFactory(SSLHelper.getSSLSocketFactory(getApplication())) .hostnameVerifier(new UnSafeHostnameVerifier()); 123456public class UnSafeHostnameVerifier implements HostnameVerifier &#123; @Override public boolean verify(String hostname, SSLSession session) &#123; return true; &#125;&#125; 至此，Https双向验证的配置全部完成了。 本文基于笔者项目实践，关于SSL认证笔者还没有了解透彻，如有错误，请多多指出。 参考Android HTTPS SSL双向验证 keytool 错误: java.lang.Exception: 所输入的不是 X.509 证书]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[用Github Page+Hexo轻松搭建个人博客]]></title>
      <url>%2FBlog%2FHexoBlog</url>
      <content type="text"><![CDATA[在2018年来临之际，笔者拖延了一年多的博客终于上线了，本文基于笔者的实践经验，即使你是一个技术小白，按照本文的步骤，也可以轻松搭建自己的博客。 为什么要搭建个人博客？ 总结和写作能力很重要 独立的才是自己的，所有文章都可永久保存在自己的服务器 畅所欲言，不受监管审查 很酷 搭建个人博客的方法搭建个人博客，一般有三种方法： Wordpress：70%的网站都采用这个方法，商业化成熟，简单门槛低； 静态网页+博客框架：代表是Github Page+Hexo，有一定的技术门槛，好处是不用VPS，本文会详细介绍此方案； 自己编写一个网站：前后端都自己实现，嗯，门槛高又费时间，不提了。 Github Page是什么Github是全球最大的开源社区，Github Page是面向用户、组织和项目开放的公共静态页面搭建托管服务，站点可以被免费托管在Github上。 Hexo是什么你可以将你的静态页面直接放在Github Page上，也可以用Hexo或者Jekyll等博客框架自动生成站点。 Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 准备 Github账号：官网：Github Git：Git下载安装程序 Node.js：你可以通过Node.js下载安装程序，也可以用Git Bash安装 Markdown编辑器：用于写文章，如果你还不知道Markdown，强烈建议你去了解下Markdown的语法 Hexo安装打开Git Bash，输入以下命令安装Hexo1$ npm install -g hexo-cli 初始化打开Git Bash，输入命令1$ hexo init [folder] [folder]代表的是你的hexo文件夹名，如果不写，就默认在当前文件夹初始化。然后进入你的hexo文件夹1$ cd [folder] 生成静态文件需要执行generate命令生成静态文件，才能部署到服务器1$ hexo g 启动服务器由于还没有配置Github，所以我们先部署到本地服务器1$ hexo server 默认情况下，访问网址为： http://localhost:4000/在某些情况下，你可能4000的端口被占用，可以选择重设端口1$ hexo -p 5000 server 这样的话地址就变成了http://localhost:5000/打开浏览器，输入地址你就可以看到你初始的博客啦。 Github配置接下来，我们来看看如何将Hexo部署到Github Page上 创建Github仓库创建与你的Github用户名相对应的Github Page仓库，格式必须是username.github.io。 建立关联进入你刚创建的仓库，复制仓库的地址 打开hexo文件夹下的_config.yml文件，拉倒最下面，修改deploy为以下代码，repository后面的是你的仓库地址 1234deploy: type: git repository: git@github.com:peterzhen40/peterzhen40.github.io.git branch: master 这里需要注意的是，Github仓库有两种连接方式： HTTPS：每次上传到仓库都需要输入账号密码 SSH：不用每次上传后输入账号密码，但需要配置SSH Key 具体的配置方法这里就不再详述了，有兴趣的朋友请参考这条链接 部署输入以下命令部署到Github Page 1$ hexo d 然后在浏览器输入username.github.io就可以看到你的博客啦，如：peterzhen40.github.io 之后的部署就是三步 123$ hexo clean$ hexo g$ hexo d 绑定域名如果你不喜欢Github Page指定的子域名，你可以选择自己购买域名，然后绑定使用。 购买域名域名购买水还挺深的，国内的有阿里云（万网），但国内的域名需要备案，你懂的；国外的选择就多了，比较著名的有GoDaddy，记得用优惠码就是了，就不详细介绍了。 域名解析用域名供应商提供的域名解析器或者DNSpod，添加以下记录： 其中两条记录A指向的ip地址是Github Page提供的ip，CNAME记录指定的是你在Github创建的仓库。 等解析生效之后呢，www.username.github.io和username.github.io都会指向你购买的域名。 绑定域名最后一步，你需要配置你的仓库，使得username.github.io能通过你的域名来访问。在hexo的source目录下，创建CNAME文件，没有后缀，打开文件后输入你的域名，如 1peterzhen.cn 保存之后部署到服务器，配置就完成了。 写作Markdown如果你不喜欢枯燥的text文本，又对html繁杂的标签无从入手，那么笔者推荐你使用Markdown Markdown 是一种轻量级标记语言。它允许人们使用”易读易写”的纯文本格式编写文档，然后转换成有效的HTML文档。 简单来说，Markdown就是带格式的文本，Markdown的语法非常简单，”易读易写”，只要你接触过了，相信我，你会对其爱不释手，再也不想去写什么text文本和word文档了。markdown编辑器，win平台，我推荐Typora。 Hexo写作Hexo默认使用markdown语法来写作，你可以执行以下命令来创建一篇新文章： 1$ hexo new [layout] &lt;title&gt; 你可以在[layout]中指定文章的布局，默认是post，hexo默认有三种布局，每种布局的路径不同： 布局 路径 post source/_posts page source draft source/_drafts 其中 draft是指草稿，默认不会显示在页面上。 在新建文件时，Hexo会根据scaffolds目录的模版文件来创建文件，所以你可以修改模版文件来达到更好的初始化效果，如： 12345678910---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;categories:tags:---&lt;!--more--&gt; 上面文件最上方以 --- 分隔的区域文本有点特殊，它并不是markdown代码，而是Hexo的Front-matter，用于指定个别文件的变量，如： 参数 描述 title 标题 date 日期 categories 分类 tags 标签 需要注意的是使用categories和tags前需要先生成相应的页面 12$ hexo new page tags$ hexo new page categories 如何只显示文章的一部分和阅读更多呢？在显示内容后加一个&lt;!--more--&gt;就可以了。 写在最后一个简单的博客至此就搭建完毕了，如果你想要更个性化的界面和功能的话，就要涉及到主题了，时间有限，这部分内容咱们下篇文章再聊，敬请关注。 其实搭建一个博客是很简单的事情，坚持总结和写作才是最难的事，别像笔者一样半年才憋出一篇文章，哈哈。 参考：hexo官方文档 HEXO搭建个人博客 如何搭建一个独立博客]]></content>
    </entry>

    
  
  
</search>
